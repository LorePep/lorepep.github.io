<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lorenzo Peppoloni</title>
    <link>/</link>
    <description>Recent content on Lorenzo Peppoloni</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 11 Feb 2020 07:13:50 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Everything you need to know about the Lucas-Kanade tracker</title>
      <link>/lkttracker/</link>
      <pubDate>Tue, 11 Feb 2020 07:13:50 +0000</pubDate>
      
      <guid>/lkttracker/</guid>
      <description>The Lucas-Kanade-Tomasi (LKT) tracker is one of the most used trackers in computer vision. It&#39;s easy to implement and understand, it&#39;s fast to compute and it works fairly well.
The tracker is based on the Lucas-Kanade (LK) optical flow estimation algorithm. The problem of optical flow estimation is the problem of estimating the motion of the pixels in an image across a sequence of consecutive pictures (e.g., a video).
The idea of the LK estimation is pretty straightforward.</description>
    </item>
    
    <item>
      <title>Proto nested messages and repeated fields in Python</title>
      <link>/nestedmessagepy/</link>
      <pubDate>Tue, 04 Feb 2020 20:13:50 +0000</pubDate>
      
      <guid>/nestedmessagepy/</guid>
      <description>Today I was having some problems populating a proto repeated message in Python with a nested message definition, and it took me a while to figure out how to do it.
In reality it is pretty simple. Let&amp;rsquo;s make an example.
syntax = &amp;quot;proto3&amp;quot;; package test; message Trajectory2d { message Point2d { float x = 1; float y = 2; } repeated Point2d points = 1; } Let&amp;rsquo;s save our test.</description>
    </item>
    
    <item>
      <title>Table-driven tests in Python</title>
      <link>/tabledriventestspy/</link>
      <pubDate>Sun, 02 Feb 2020 02:13:50 +0000</pubDate>
      
      <guid>/tabledriventestspy/</guid>
      <description>Table-driven tests are an elegant and functional way to unittest your functions in Go. Let&amp;rsquo;s see some ideas on how to introduce this same testing pattern in Python.
What are table-driven tests One thing I really love about Go is table-driven tests. If you are not familiar with them, table-driven tests are a very elegant way to write unittests for your code. The basic idea is that you write a list of named test cases, defining the input and the expected output for each test case, then you loop over the cases, run your function and check that the actual output is equal to the expected one.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>/page/about/</link>
      <pubDate>Fri, 03 Apr 2015 02:13:50 +0000</pubDate>
      
      <guid>/page/about/</guid>
      <description>About A brief history of my education and experience
Education
I got a BSc in Informatic Engineering and a MSc in Robotics and Automation from University of Pisa. After that I got a PhD in Perceptual Robotics from Scoula Superiore Sant&amp;rsquo;Anna. The main focus of my PhD was human motion reconstruction from cheap sensors applied to robotic teleoperation and robotic embodiement.
In 2015 and later in 2017, I spent some time in LA at USC with Prof.</description>
    </item>
    
  </channel>
</rss>